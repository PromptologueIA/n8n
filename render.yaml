services:
  - type: web
    name: n8n

    # --- Variables d'environnement ---
    envVars:
      # Configuration de base de n8n
      - key: PORT
        value: "5678"
      - key: N8N_LOG_LEVEL
        value: "info"
      - key: GENERIC_TIMEZONE
        value: "Europe/Paris"
      - key: TZ
        value: "fr"
      - key: N8N_ENCRYPTION_KEY
        generateValue: true
      - key: WEBHOOK_URL
        sync: false
      - key: WEBHOOK_TUNNEL_URL
        sync: false
        
      # S√©curit√© et authentification
      - key: N8N_USER_MANAGEMENT_DISABLED
        value: "false"
      - key: N8N_BASIC_AUTH_USER
        sync: false
      - key: N8N_BASIC_AUTH_PASSWORD
        sync: false
      - key: N8N_JWT_AUTH_ACTIVE
        value: "true"
      - key: N8N_JWT_AUTH_HEADER
        value: "X-N8N-Authorization"
        
      # Configuration de base de donn√©es (recommand√© pour la production)
      - key: DB_TYPE
        value: "postgresdb"  # Changez √† "sqlite" si vous pr√©f√©rez SQLite
      - key: DB_POSTGRESDB_HOST
        sync: false
      - key: DB_POSTGRESDB_DATABASE
        sync: false
      - key: DB_POSTGRESDB_USER
        sync: false
      - key: DB_POSTGRESDB_PASSWORD
        sync: false
      - key: DB_POSTGRESDB_PORT
        value: "5432"
        
      # Configuration d'ex√©cution
      - key: EXECUTIONS_PROCESS
        value: "main"  # ou "own" pour isoler les ex√©cutions de workflows
      - key: EXECUTIONS_TIMEOUT
        value: "300000"  # 5 minutes timeout par d√©faut
      - key: EXECUTIONS_TIMEOUT_MAX
        value: "3600000"  # 1 heure max timeout
      - key: MAX_WORKFLOW_OPERATIONS
        value: "1000"  # Limite d'op√©rations par workflow
        
      # Activation des n≈ìuds et packages communautaires
      - key: N8N_COMMUNITY_PACKAGES_ENABLED
        value: "true"
      - key: N8N_COMMUNITY_NODES_ENABLED
        value: "true"
      - key: N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE
        value: "true"
      - key: N8N_COMMUNITY_PACKAGES_INSTALL_TIMEOUT
        value: "60000"  # Timeout de 60 secondes pour l'installation des packages
        
      # Configuration de l'environnement Node.js
      - key: NODE_VERSION
        value: "18.17.0"

    # --- Commande de construction (build) optimis√©e ---
    buildCommand: |
      # Installation de NVM pour g√©rer les versions de Node.js
      echo "üíæ Installation de Node.js via NVM..."
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      
      # Installation et activation de Node.js 18.17.0
      echo "üíæ Installation de Node.js 18.17.0..."
      nvm install 18.17.0
      nvm use 18.17.0
      nvm alias default 18.17.0  # D√©finir comme version par d√©faut
      
      # V√©rification de la version de Node.js
      echo "üîÑ V√©rification de la version de Node.js install√©e..."
      node -v
      
      # Optimisation: Ne nettoyer que si n√©cessaire
      if [ -d "/home/node/.n8n" ] || [ -d "/home/node/node_modules" ]; then
        echo "üöÄ Nettoyage des installations pr√©c√©dentes..."
        rm -rf /home/node/.n8n
        rm -rf /home/node/node_modules
      fi
      
      # Clonage de ton fork de n8n avec optimisation
      echo "üì• Clonage du fork GitHub de n8n..."
      git clone --depth=1 --single-branch https://github.com/TON-FORK/n8n.git /home/node/n8n
      cd /home/node/n8n
      
      # Installation des d√©pendances de n8n avec mise en cache
      echo "üì¶ Installation des d√©pendances..."
      npm ci --prefer-offline --no-audit
      
      # Compilation de n8n
      echo "üîß Compilation de n8n..."
      npm run build
      
      # Installation des MCP (n≈ìuds communautaires et serveurs)
      echo "üì¶ Installation des MCP (Community Packages)..."
      mkdir -p /home/node/.n8n/custom
      npm install --no-save --prefix /home/node/.n8n/custom n8n-nodes-mcp @modelcontextprotocol/server-brave-search @modelcontextprotocol/server-perplexity-ask

    # --- Commande de d√©marrage ---
    startCommand: |
      # Lancement de n8n avec NVM
      echo "üåê Lancement de n8n..."
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm use 18.17.0
      
      # D√©marrage de n8n depuis le dossier clon√© avec options optimis√©es
      cd /home/node/n8n
      NODE_ENV=production npm run start -- --tunnel

    # --- Disques persistants ---
    disks:
      # Disque pour les d√©pendances (node_modules)
      - name: node-modules
        mountPath: /home/node/node_modules
        sizeGB: 1
      # Disque pour les donn√©es de n8n (workflows, identifiants, etc.)
      - name: n8n-data
        mountPath: /home/node/.n8n
        sizeGB: 1
      # Cache npm pour acc√©l√©rer les futures installations
      - name: npm-cache
        mountPath: /home/node/.npm
        sizeGB: 0.5